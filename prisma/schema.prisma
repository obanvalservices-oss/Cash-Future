// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RelacionTipo {
  PAREJA
  AMIGO
  SOCIO
  FAMILIAR
  OTRO
}

enum ModuloTipo {
  INGRESOS
  GASTOS
  AHORROS
  INVERSIONES
}

enum VisibilidadNivel {
  NADA
  PARCIAL
  TOTAL
}

enum AsociacionEstado {
  PENDIENTE
  ACTIVA
  REVOCADA
  RECHAZADA
  BLOQUEADA
}

enum PaySource {
  INCOME
  SAVINGS
}

model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  password              String
  nombre                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  asociacionesCreadas   Asociacion[]           @relation("AsociacionesCreadas")
  asociacionesInvitado  Asociacion[]           @relation("AsociacionesInvitado")
  movimientosCreados    MovimientoCompartido[] @relation("SharedCreatedBy")
  Ingreso               Ingreso[]
  Gasto                 Gasto[]
  Ahorro                Ahorro[]
  FondoInversion        FondoInversion[]
  Inversion             Inversion[]
  debts                 Debt[]
  UserSettings          UserSettings?
}

model UserSettings {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  weekStartDay  Int     @default(1)
  weekEndDay    Int     @default(0)
  currency      String? @default("USD")
  timezone      String? @default("UTC")
  notifications Boolean @default(true)
  user          User    @relation(fields: [userId], references: [id])
}

model Categoria {
  id        String   @id @default(uuid())
  nombre    String
  modulo    String
  gastos    Gasto[]  @relation("CategoriaGastos")
  createdAt DateTime @default(now())
}

model Ingreso {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  fuente     String
  monto      Float
  frecuencia String?
  fecha      DateTime
  fijo       Boolean
  categoria  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isShared   Boolean  @default(false)
  sharedId   String?
  colorTag   String?
  @@index([sharedId])
}

model Gasto {
  id          String    @id @default(uuid())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  descripcion String
  monto       Float
  origen      String
  fecha       DateTime
  fijo        Boolean
  frecuencia  String?
  categoriaId String
  categoria   Categoria @relation("CategoriaGastos", fields: [categoriaId], references: [id])
  createdAt   DateTime  @default(now())
  isShared    Boolean   @default(false)
  sharedId    String?
  colorTag    String?
}

model Ahorro {
  id           Int                @id @default(autoincrement())
  userId       Int
  user         User               @relation(fields: [userId], references: [id])
  objetivo     String
  meta         Float              @default(0)
  fechaInicio  DateTime           @default(now())
  fijo         Boolean            @default(false)
  frecuencia   String?
  aporteFijo   Float?             @default(0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  movimientos  MovimientoAhorro[]
  debtPayments DebtPayment[]
}

model FondoInversion {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  nombre      String
  inversiones Inversion[]
  @@unique([userId, nombre])
}

model Inversion {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  fondoId      Int
  fondo        FondoInversion @relation(fields: [fondoId], references: [id], onDelete: Cascade)
  tipo         String
  activo       String
  ticker       String
  cantidad     Float
  precioCompra Float
  descripcion  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model MovimientoAhorro {
  id        Int      @id @default(autoincrement())
  ahorroId  Int
  ahorro    Ahorro   @relation(fields: [ahorroId], references: [id], onDelete: Cascade)
  fecha     DateTime @default(now())
  motivo    String   @default("")
  monto     Float    @default(0)
  createdAt DateTime @default(now())
}

model Asociacion {
  id                   String                 @id @default(cuid())
  ownerId              Int
  partnerUserId        Int?
  partnerEmail         String
  partnerDisplayName   String
  relacion             RelacionTipo
  estado               AsociacionEstado       @default(PENDIENTE)
  aliasParaOwner       String?
  aliasParaPartner     String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  owner                User                   @relation("AsociacionesCreadas", fields: [ownerId], references: [id], onDelete: Cascade)
  partnerUser          User?                  @relation("AsociacionesInvitado", fields: [partnerUserId], references: [id], onDelete: SetNull)
  permisos             AsociacionPermiso[]
  ocultos              AsociacionOculto[]
  movimientosCompartidos MovimientoCompartido[]
  @@unique([ownerId, partnerEmail])
}

model AsociacionPermiso {
  id           String           @id @default(cuid())
  asociacionId String
  modulo       ModuloTipo
  visibilidad  VisibilidadNivel
  asociacion   Asociacion       @relation(fields: [asociacionId], references: [id], onDelete: Cascade)
  @@unique([asociacionId, modulo])
}

model AsociacionOculto {
  id           String     @id @default(cuid())
  asociacionId String
  modulo       ModuloTipo
  recordId     String
  asociacion   Asociacion @relation(fields: [asociacionId], references: [id], onDelete: Cascade)
  @@index([asociacionId, modulo])
}

model MovimientoCompartido {
  id              String      @id @default(cuid())
  asociacionId    String
  modulo          ModuloTipo
  concepto        String
  montoTotal      Float
  aporteOwner     Float
  aportePartner   Float
  fecha           DateTime
  createdByUserId Int?
  asociacion      Asociacion  @relation(fields: [asociacionId], references: [id], onDelete: Cascade)
  createdBy       User?       @relation("SharedCreatedBy", fields: [createdByUserId], references: [id], onDelete: SetNull)
  @@index([asociacionId])
}

model Debt {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id])
  title              String
  description        String?
  principal          Float
  interestRate       Float?   @default(0)
  startDate          DateTime
  dueDay             Int?
  frequency          String?
  installmentAmount  Float?
  initialDownPayment Float?   @default(0)
  status             String   @default("ACTIVA")
  firstDueDate       DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  payments           DebtPayment[]
}

model DebtPayment {
  id        Int      @id @default(autoincrement())
  debtId    Int
  debt      Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
  fecha     DateTime
  monto     Float
  paySource PaySource @default(INCOME)
  ahorroId  Int?
  ahorro    Ahorro?  @relation(fields: [ahorroId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  note      String?
  createdAt DateTime @default(now())
}